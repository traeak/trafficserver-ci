def doParallelBuilds() {
	def images = [
		'centos:7, 'centos:8',
		'fedora:32', 'fedora:33',
		'ubuntu:18.04', 'ubuntu:20.04',
		'debian:9' 'debian:10',
	]
	def compilers = [ 'gcc', 'clang' ]
	def types = [ 'release', 'debug' ]

	def buildjobs = [:]

	// create list of build jobs

	def builders = [:]
	String repo = 'controller.trafficserver.org'

	for (params in buildjobs) {
		def distro = params[0]
		def compiler = params[1]
		def type = params[2]
		String jobName = distro + ' ' + compiler + ' ' + type
		builders[jobName] = {
			stage(jobName) {
				script {
					result = buildJob(jobName, 'Branch_Builds/OS_Build', distro, compiler, type)
					 if (result == 'FAILURE') {
						error("${jobName} build failed")
					}
				}
			}
		}
	}

	parallel builders
}

String validateJob(String ghcontext, String jobName) {
		echo "Build of '${jobName}-${GITHUB_BRANCH}'"
		def jobBuild = build job: jobName, propagate: false,
				parameters: [
						string(name: 'GITHUB_URL', value: env.GITHUB_URL),
						string(name: 'GITHUB_BRANCH', value: env.GITHUB_BRANCH)
				]
		def jobResult = jobBuild.getResult()
		echo "Build of '${jobName}-${GITHUB_BRANCH}' returned result: ${jobResult}"
		return jobResult
}

String buildJob(String ghcontext, String jobName, String distro, String compiler, String type) {
		echo "Build of '${jobName}-${GITHUB_BRANCH}-${distro}-${compiler}-${type}'"
		def jobBuild = build job: jobName, propagate: false,
				parameters: [
						string(name: 'GITHUB_URL', value: GITHUB_URL),
						string(name: 'GITHUB_BRANCH', value: GITHUB_BRANCH),
						string(name: 'DISTRO', value: distro),
						string(name: 'COMPILER', value: compiler),
						string(name: 'TYPE', value: type)
				]
		def jobResult = jobBuild.getResult()
		echo "Build of '${jobName}-${GITHUB_BRANCH}-${distro}-${compiler}-${type}' returned result: ${jobResult}"
		return jobResult
}

def shaForBranch(url, branch) {
	sha1 = sh (
		script: "set -- `git ls-remote -h $url refs/heads/$branch`; echo \${1}",
		returnStdout: true
	).trim()
	return sha1
}

pipeline {
	agent any

/*
	options {
		parallelsAlwaysFailFast()
	}
*/

	stages {
		stage('Initialization') {
			steps {
				script {
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (! env.SHA1) {
						env.SHA1 = shaForBranch(env.GITHUB_URL, env.GITHUB_BRANCH)
						echo "branch build hash ${SHA1}"
					}
				}
			}
		}

		stage('Validation') {
			parallel {
				stage('In Tree') {
					steps {
						script {
							result = validateJob('in_tree', 'Branch_Builds/in_tree')
							if ('FAILURE' == result) { error("in tree build failed") }
						}
					}
				}
				stage('Out Of Tree') {
					steps {
						script {
							result = validateJob('out_of_tree', 'Branch_Builds/out_of_tree')
							if ('FAILURE' == result) { error("out of tree build failed") }
						}
					}
				}
				stage('RAT') {
					steps {
						script {
							result = validateJob('rat', 'Branch_Builds/rat')
							if ('FAILURE' == result) { error("rat build failed") }
						}
					}
				}
				stage('clang-format') {
					steps {
						script {
							result = validateJob('clang-format', 'Branch_Builds/clang-format')
							if ('FAILURE' == result) { error("clang-format build failed") }
						}
					}
				}
			}
		}
		
		stage('Snapshot') {
			steps {
				script {
					result = validateJob('snapshot', 'Branch_Builds/snapshot')
					if ('FAILURE' == result) { error("snapshot failed") }
				}
			}
		}
		
		stage('OS Builds') {
			steps {
				script {
					doParallelBuilds()
				}
			}
		}
		
		stage('Verification') {
			parallel {
				stage('clang-analyzer') {
					steps {
						script {
								/*
							result = validateJob('clang-analyzer', 'Branch_Builds/clang-analyzer')
							if ('FAILURE' == result) { error("clang-analyzer failed") }
								*/
							echo "skipping clang-analyzer"
						}
					}
				}
				stage('autests') {
					steps {
						script {
								/*
							result = validateJob('autest', 'Branch_Builds/autest')
							if ('FAILURE' == result) { error("clang-analyzer failed") }
								*/
							echo "skipping autest"
						}
					}
				}
			}
		}
	}
}
