def parallelTasks() {
  def buildjobs = [
    [ 'centos:7', 'gcc', 'release' ],
    [ 'centos:7', 'gcc', 'debug' ],
    /*
    [ 'centos:8', 'gcc', 'debug' ],
    [ 'centos:8', 'clang', 'release' ],

    [ 'fedora:32', 'gcc', 'release' ],
    [ 'fedora:32', 'clang', 'debug' ],
    [ 'fedora:33', 'gcc', 'debug' ],
    [ 'fedora:33', 'clang', 'release' ],

    [ 'ubuntu:18.04', 'gcc', 'release' ],
    [ 'ubuntu:18.04', 'clang', 'debug' ],
    [ 'ubuntu:20.04', 'gcc', 'debug' ],
    [ 'ubuntu:20.04', 'clang', 'release' ],
    */
    /*
    [ 'debian:9', 'gcc', 'release' ],
    [ 'debian:9', 'clang', 'debug' ],
    */
    [ 'debian:10', 'gcc', 'debug' ],
    [ 'debian:10', 'clang', 'release' ],
    [ 'debian:10', 'clang', 'hardening' ],
  ]


  def builders = [:]
  String repo = 'controller.trafficserver.org'

  for (params in buildjobs) {
    def distro = params[0]
    def compiler = params[1]
    def type = params[2]
    String jobName = distro + ' ' + compiler + ' ' + type
    builders[jobName] = {
      stage(jobName) {
        script {
          result = buildJob(jobName, 'BNO/OS_Build', distro, compiler, type)
           if (result == 'FAILURE') {
            error("${jobName} build failed")
          }
        }
      }
    }
  }

  parallel builders
}

String buildTreeJob(String ghcontext, String jobName, String url, String branch) {
    echo "Build of '${jobName}-${branch}'"
    def jobBuild = build job: jobName, propagate: false,
        parameters: [
            string(name: 'GITHUB_URL', value: url),
            string(name: 'GITHUB_BRANCH', value: branch),
        ]
    def jobResult = jobBuild.getResult()
    echo "Build of '${jobName}-${branch}' returned result: ${jobResult}"
    return jobResult
}

String buildOSJob(String ghcontext, String jobName, String distro, String compiler, String type) {
    echo "Build of '${jobName}-${distro}-${compiler}-${type}'"
    def jobBuild = build job: jobName, propagate: false,
        parameters: [
            string(name: 'DISTRO', value: distro),
            string(name: 'COMPILER', value: compiler),
            string(name: 'TYPE', value: type)
        ]
    def jobResult = jobBuild.getResult()
    echo "Build of '${jobName}-${distro}-${compiler}-${type}' returned result: ${jobResult}"
    return jobResult
}

pipeline {
  agent none

  options {
    parallelsAlwaysFailFast()
  }

  stages {
    stage('Initialization') {
      steps {
        script {
          currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
        }
      }
    }

    stage('Initial Builds') {
      parallel {
        stage('In Tree') {
          steps {
            buildTreeJob('in_tree', 'BNO/in_tree', GITHUB_URL, GITHUB_BRANCH)
          }
        }
        stage('Out Of Tree') {
          steps {
            buildTreeJob('out_of_tree', 'BNO/out_of_tree', GITHUB_URL, GITHUB_BRANCH)
          }
        }
        stage('RAT') {
          steps {
            buildTreeJob('rat', 'BNO/rat', GITHUB_URL, GITHUB_BRANCH)
          }
        }
      }
    }
  }
}
