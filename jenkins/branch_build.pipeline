def parallelTasks() {
  def buildjobs = [
    [ 'centos:7', 'gcc', 'release' ],
    [ 'centos:7', 'gcc', 'debug' ],

    [ 'centos:8', 'gcc', 'debug' ],
    [ 'centos:8', 'clang', 'release' ],

    [ 'fedora:32', 'gcc', 'release' ],
    [ 'fedora:32', 'clang', 'debug' ],
    [ 'fedora:33', 'gcc', 'debug' ],
    [ 'fedora:33', 'clang', 'release' ],

    [ 'ubuntu:18.04', 'gcc', 'release' ],
    [ 'ubuntu:18.04', 'clang', 'debug' ],
    [ 'ubuntu:20.04', 'gcc', 'debug' ],
    [ 'ubuntu:20.04', 'clang', 'release' ],

    [ 'debian:9', 'gcc', 'release' ],
    [ 'debian:9', 'clang', 'debug' ],

    [ 'debian:10', 'gcc', 'debug' ],
    [ 'debian:10', 'clang', 'release' ],
    [ 'debian:10', 'clang', 'hardening' ],
  ]


  def builders = [:]
  String repo = 'controller.trafficserver.org'

  for (params in buildjobs) {
    def distro = params[0]
    def compiler = params[1]
    def type = params[2]
    String jobName = distro + ' ' + compiler + ' ' + type
    builders[jobName] = {
      stage(jobName) {
        script {
          result = buildJob(jobName, 'BNO/OS_Build', distro, compiler, type)
           if (result == 'FAILURE') {
            error("${jobName} build failed")
          }
        }
      }
    }
  }

  parallel builders
}

String validateJob(String ghcontext, String jobName) {
    echo "Build of '${jobName}-${GITHUB_BRANCH}'"
    def jobBuild = build job: jobName, propagate: false,
        parameters: [
            string(name: 'GITHUB_URL', value: env.GITHUB_URL),
            string(name: 'GITHUB_BRANCH', value: env.GITHUB_BRANCH)
        ]
    def jobResult = jobBuild.getResult()
    echo "Build of '${jobName}-${GITHUB_BRANCH}' returned result: ${jobResult}"
    return jobResult
}

String buildJob(String ghcontext, String jobName, String distro, String compiler, String type) {
    echo "Build of '${jobName}-${GITHUB_BRANCH}-${distro}-${compiler}-${type}'"
    def jobBuild = build job: jobName, propagate: false,
        parameters: [
            string(name: 'GITHUB_URL', value: GITHUB_URL),
            string(name: 'GITHUB_BRANCH', value: GITHUB_BRANCH),
            string(name: 'DISTRO', value: distro),
            string(name: 'COMPILER', value: compiler),
            string(name: 'TYPE', value: type)
        ]
    def jobResult = jobBuild.getResult()
    echo "Build of '${jobName}-${GITHUB_BRANCH}-${distro}-${compiler}-${type}' returned result: ${jobResult}"
    return jobResult
}

pipeline {
  agent none

/*
  options {
    parallelsAlwaysFailFast()
  }
*/

  stages {
    stage('Initialization') {
      steps {
        script {
          currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
        }
      }
    }

    stage('Validation') {
      parallel {
        stage('In Tree') {
          steps {
            script {
              result = validateJob('in_tree', 'BNO/in_tree')
              if ('FAILURE' == result) { error("in tree build failed") }
            }
          }
        }
        stage('Out Of Tree') {
          steps {
            script {
              result = validateJob('out_of_tree', 'BNO/out_of_tree')
              if ('FAILURE' == result) { error("out of tree build failed") }
            }
          }
        }
        stage('RAT') {
          steps {
            script {
              result = validateJob('rat', 'BNO/rat')
              if ('FAILURE' == result) { error("rat build failed") }
            }
          }
        }
        stage('clang-format') {
          steps {
            script {
              result = validateJob('clang-format', 'BNO/clang-format')
              if ('FAILURE' == result) { error("clang-format build failed") }
            }
          }
        }
      }
    }
    
    stage('Snapshot') {
      steps {
        script {
          result = validateJob('snapshot', 'BNO/snapshot')
          if ('FAILURE' == result) { error("snapshot failed") }
        }
      }
    }
    
    stage('OS Builds') {
      steps {
        script {
          parallelTasks()
        }
      }
    }
    
    stage('Verification') {
      parallel {
        stage('clang-analyzer') {
          steps {
            script {
                /*
              result = validateJob('clang-analyzer', 'BNO/clang-analyzer')
              if ('FAILURE' == result) { error("clang-analyzer failed") }
                */
              echo "skipping clang-analyzer"
            }
          }
        }
        stage('autests') {
          steps {
            echo "skipping autest"
          }
        }
      }
    }
  }
}
