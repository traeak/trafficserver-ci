pipeline {
	agent {
		docker {
			image 'ats/${DISTRO}'
			args '-v /home/rooter/ccache:/tmp/ccache:rw'
			label 'linux'
		}
	}
	environment {
		CCACHE_DIR = "/tmp/ccache"
	}
	/*
	options {
		ansiColor('xterm')
	}
	*/
	stages {
		stage('Initializaztion') {
			steps {
				script {
					String newname = "${GITHUB_BRANCH} ${DISTRO} ${COMPILER} ${TYPE}"
					currentBuild.displayName = "#${BUILD_NUMBER} " + newname
					/*
					currentBuild.rawBuild.project.description = newname
					currentBuild.rawBuild.project.setDisplayName(newname)
					*/
					if (env.SHA1) {
						currentBuild.description = env.SHA1
					}
				}
			}
		}
		stage('Clone') {
			steps {
				echo 'Starting Clone'
				dir('ci') {
					git branch: 'full_pipeline', url: 'https://github.com/traeak/trafficserver-ci'
				}
				dir('src') {
					script {
						if (env.SHA1) {
							checkout([$class: 'GitSCM',
								branches: [[name: env.SHA1]],
								userRemoteConfigs: [[url: env.GITHUB_URL]]])
						} else {
							git url: env.GITHUB_URL, branch: env.GITHUB_BRANCH
						}
					}
				}
				echo 'Finished Clone'
			}
		}
		stage('Build') {
			steps {
				echo 'Starting Build'
				dir('src') {
					//sh('source ../ci/jenkins/bin/environment.sh && autoreconf -if && ../ci/jenkins/bin/build.sh')
				}
				echo 'Finished Build'
			}
		}
		stage('Tests') {
			steps {
				echo 'Starting Tests'
				dir('src') {
					//sh('source ../ci/jenkins/bin/environment.sh && ../ci/jenkins/bin/regression.sh')
				}
				echo 'Skipping Tests'
				echo 'Finished Tests'
			}
		}
	}
	post {
		cleanup {
			cleanWs()
		}
	}
}
