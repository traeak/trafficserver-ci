DRY_RUN = false

def doParallelBuilds() {
	def buildjobs = []

	def types = env.TYPES.split(' ')
	def compilers = env.COMPILERS.split(' ')

	for (type in types) {
		for (compiler in compilers) {
			buildjobs.add([env.DISTRO, compiler, type].join(','))
		}
	}

	String jjob = env.GITHUB_BRANCH + '/' + 'OS_Build'
	echo jjob

	def builders = [:]

	for (buildjob in buildjobs) {
		def params = buildjob.split(',')
		def distro = params[0]
		def compiler = params[1]
		def type = params[2]
		String jobName = distro + ' ' + compiler + ' ' + type
		builders[jobName] = {
			stage(jobName) {
				script {
					result = buildJob(jobName, jjob, distro, compiler, type)
					if (result == 'FAILURE') {
						error("${jobName} build failed")
					}
				}
			}
		}
	}

	parallel builders
}

def buildJob(String ghcontext, String jobName, String distro, String compiler, String type) {
	String name = '${jobName}-${GITHUB_BRANCH}-${distro}-${compiler}-${type}'
	echo "Build of '${name}'"
	if (DRY_RUN) { jobName = "Branch_Builds/dummy" }
	def jobBuild = build job: jobName, propagate: false,
		parameters: [
			string(name: 'GITHUB_URL', value: GITHUB_URL),
			string(name: 'GITHUB_BRANCH', value: GITHUB_BRANCH),
			string(name: 'DISTRO', value: distro),
			string(name: 'COMPILER', value: compiler),
			string(name: 'TYPE', value: type)
		]
	def result = jobBuild.getResult()
	echo "Build of '${name}' returned result: ${result}"
	if ('FAILURE' == result) { error("${jobName} failed") }
}

def shaForBranch(url, branch) {
	sha1 = sh (
		script: "set -- `git ls-remote -h $url refs/heads/$branch`; echo \${1}",
		returnStdout: true
	).trim()
	return sha1
}

pipeline {
	agent none

	stages {
		stage('Initialization') {
			agent { label 'master' }
			steps {
				script {
					if (! env.DISTRO) {
						def dparts = env.JOB_BASE_NAME.split(['-', '_'])
						if (3 != dparts.length) {
							error("Invalid job base name ${JOB_BASE_NAME}")
						}
						env.DISTRO = [ dparts[1], dparts[2] ].join(':')
					}
					if (! env.GITHUB_BRANCH) {
						def bparts = env.JOB_NAME.split('/')
						if (2 != bparts.length) {
							error("Invalid branch name from ${JOB_NAME}")
						}
						env.GITHUB_BRANCH = bparts[0]
					}

					currentBuild.displayName = "${GITHUB_BRANCH} ${DISTRO}"
					if (! env.SHA1) {
						env.SHA1 = shaForBranch(env.GITHUB_URL, env.GITHUB_BRANCH)
					}
					sh 'printenv'
				}
			}
		}
		stage('Builds') {
			steps {
				script {
					doParallelBuilds()
				}
			}
		}
	}
	/*
	post {
		cleanup {
			cleanWs()
		}
	}
	*/
}
