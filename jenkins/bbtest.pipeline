DRY_RUN = true

def doParallelBuilds() {
  def images = [
	'centos:7', 'centos:8',
	'fedora:32', 'fedora:33',
	'ubuntu:18.04', 'ubuntu:20.04',
	'debian:9', 'debian:10',
  ]
  def compilers = [ 'gcc', 'clang' ]
  def types = [ 'release', 'debug' ]

  def buildjobs = []

  // create an encoded list of build jobs
  for (image in images) {
		for (compiler in compilers) {
			for (type in types) {
				buildjobs.add([image, compiler, type].join(','))
			}
		}
  }

  buildjobs = buildjobs.minus('centos:7,clang,debug')
  buildjobs = buildjobs.minus('centos:7,clang,release')

  def builders = [:]

  for (buildjob in buildjobs) {
		def params = buildjob.split(',')
		def distro = params[0]
		def compiler = params[1]
		def type = params[2]
		String jobName = distro + ' ' + compiler + ' ' + type
		builders[jobName] = {
			stage(jobName) {
				script {
					result = buildJob(jobName, 'Branch_Builds/OS_Build', distro, compiler, type)
					if (result == 'FAILURE') {
						error("${jobName} build failed")
					}
				}
			}
		}
  }

  parallel builders
}

def validateJob(String ghcontext, String jobName) {
	echo "Build of '${jobName}-${GITHUB_BRANCH}'"
	if (DRY_RUN) { jobName = "Branch_Builds/dummy" }
	def jobBuild = build job: jobName, propagate: false,
		parameters: [
			string(name: 'GITHUB_URL', value: env.GITHUB_URL),
			string(name: 'GITHUB_BRANCH', value: env.GITHUB_BRANCH)
		]
	def result = jobBuild.getResult()
	echo "Build of '${jobName}-${GITHUB_BRANCH}' returned result: ${result}"
	if ('FAILURE' == result) { error("${jobName} failed") }
}

def buildJob(String ghcontext, String jobName, String distro, String compiler, String type) {
	String name = '${jobName}-${GITHUB_BRANCH}-${distro}-${compiler}-${type}'
	echo "Build of '${name}'"
	if (DRY_RUN) { jobName = "Branch_Builds/dummy" }
	def jobBuild = build job: jobName, propagate: false,
		parameters: [
			string(name: 'GITHUB_URL', value: GITHUB_URL),
			string(name: 'GITHUB_BRANCH', value: GITHUB_BRANCH),
			string(name: 'DISTRO', value: distro),
			string(name: 'COMPILER', value: compiler),
			string(name: 'TYPE', value: type)
		]
	def result = jobBuild.getResult()
	echo "Build of '${name}' returned result: ${result}"
	if ('FAILURE' == result) { error("${jobName} failed") }
}

def shaForBranch(url, branch) {
	sha1 = sh (
		script: "set -- `git ls-remote -h $url refs/heads/$branch`; echo \${1}",
		returnStdout: true
	).trim()
	return sha1
}

pipeline {
	agent none

	/*
	options {
	parallelsAlwaysFailFast()
	}
	*/

	stages {
		stage('Initialization') {
			agent { label 'master' }
			steps {
				script {
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (! env.SHA1) {
						env.SHA1 = shaForBranch(env.GITHUB_URL, env.GITHUB_BRANCH)
					}
					echo "Building hash ${SHA1}"
				}
			}
		}

		stage('Validation') {
			parallel {
				stage('In Tree') {
					steps {
						script {
							validateJob('in_tree', 'Branch_Builds/in_tree')
						}
					}
				}
				stage('Out Of Tree') {
					steps {
						script {
							validateJob('out_of_tree', 'Branch_Builds/out_of_tree')
						}
					}
				}
				stage('RAT') {
					steps {
						script {
							validateJob('rat', 'Branch_Builds/rat')
						}
					}
				}
				stage('clang-format') {
					steps {
						script {
							validateJob('clang-format', 'Branch_Builds/clang-format')
						}
					}
				}
			}
		}

		stage('Snapshot') {
			steps {
				script {
					validateJob('snapshot', 'Branch_Builds/snapshot')
				}
			}
		}

		stage('OS Builds') {
			steps {
				script {
					doParallelBuilds()
				}
			}
		}

		stage('Verification') {
			parallel {
				stage('clang-analyzer') {
					steps {
						script {
							validateJob('clang-analyzer', 'Branch_Builds/clang-analyzer')
						}
					}
				}
				stage('autests') {
					steps {
						script {
							/*
							validateJob('autest', 'Branch_Builds/autest')
							*/
							echo "skipping autest"
						}
					}
				}
				stage('cache-tests') {
					steps {
						script {
							/*
							validateJob('autest', 'Branch_Builds/cache-tests')
							*/
							echo "skipping cache-tests"
						}
					}
				}
			}
		}
	}
}
