pipeline {
	agent {
		docker {
			image 'ats/ubuntu:20.04'
			registryUrl 'https://controller.trafficserver.org/'
			args '-v /home/rooter/clang-analyzer:/tmp/clang-analyzer:rw'
			label 'docker'
		}			
	}			

	stages {
		stage('Initialization') {
			steps {
				script {
					currentBuild.displayName = "#${BUILD_NUMBER} ${GITHUB_BRANCH}"
					if (env.SHA1) {
						currentBuild.description = env.SHA1
					}
				}
			}
		}

		stage('Clone') {
			steps {
				dir('ci') {
					git url: 'https://github.com/traeak/trafficserver-ci',
						branch: 'full_pipeline'
				}		
				dir('src') {
					script {
						if (env.SHA1) {
							checkout([$class: 'GitSCM',
								branches: [[name: env.SHA1]],
								userRemoteConfigs: [[url: env.GITHUB_URL]]])
						} else {
							git url: env.GITHUB_URL, branch: env.GITHUB_BRANCH
						}
					}
				}

				echo 'Finished Cloning'
			}
		}
		stage('Build') {
			steps {
				echo 'Starting build'
				dir('src') {
					sh '''
					enable_clang=1
					export PATH=/opt/llvm/bin:${PATH}
					source ../ci/jenkins/bin/environment.sh
					source ../ci/jenkins/bin/clang-analyzer.sh

					# $status gets set in the clang-analyzer.sh script
					exit $status
					'''
				}
			}
		}
	}

	post {
		always {
			archiveArtifacts artifacts: 'output/**/*', fingerprint: true, allowEmptyArchive: true
		}
		cleanup {
			cleanWs()
		}
	}
}
